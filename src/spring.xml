<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
<!-- @@@@@@@@@@@@@@@@@@@@@@@@@ 数据源配置 @@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- 载入变量信息 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>
	<!-- 数据源，连接池 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="5" />
		<property name="maxActive" value="100" />
		<property name="minIdle" value="1" />
		<property name="maxWait" value="6000" />
		<property name="validationQuery" value="select 1;" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<property name="filters" value="stat" />
	</bean>
	<!-- JdbcTemplate配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@Servie层配置@@@@@@@@@@@@@@@@@@@@@@@@@ -->
<context:component-scan base-package="cn.services" />

	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
<!-- 	配置基于注解的声明式事务 -->
<!-- 默认使用注解来管理事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@Dao层配置（Mybatis）@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Mybatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 扫描实体包 使用别名 (多个包用,分开) -->
		<property name="typeAliasesPackage" value="cn.beans,cn.dto"></property>
		<!-- 扫描sql配置文件 -->
		<property name="mapperLocations" value="classpath:cn/dao/mapper/*.xml"></property>
	</bean>
	<!-- 配置动态扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!-- 给出Dao接口包 -->
		<property name="basePackage" value="cn.dao"></property>
	</bean>
<!-- @@@@@@@@@@@@@@@@@@@@@@@@@其他层配置@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- redis配置 -->

	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="300" />
		<!-- <property name="maxActive" value="600" /> -->
		<!-- <property name="maxWait" value="1000" /> -->
		<property name="testOnBorrow" value="true" />
	</bean>

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="192.168.2.186" p:port="6379" p:password="dpredis"
		p:pool-config-ref="poolConfig" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 配置序列化器并指定对象模板 -->
		<property name="valueSerializer">
			<bean id="redisJsonSerializer"
				class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer">
				<constructor-arg type="java.lang.Class" value="cn.beans.User" />
			</bean>
		</property>
	</bean>
	
	

<!-- ========================定时任务 Begin====================== -->

	 <bean id="quartzJob" class="cn.services.AutoTimerJob" init-method="autoToken"></bean>
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@自动获取AccessToken@@@@@@@@@@@@@@@@@@@@@ -->
	 <bean id="autoToken" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
<!--             调用的类 -->
            <property name="targetObject">
                <ref bean="quartzJob"/>
            </property>
<!--             调用类中的方法 -->
            <property name="targetMethod">
                <value>autoToken</value>
            </property>
    </bean>
         <bean id="doAutoToken" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
            <property name="jobDetail">
                <ref bean="autoToken"/>
            </property>
<!--             cron表达式 -->
            <property name="cronExpression">
                <value>0 0 0/1 * * ?</value>
            </property>
    </bean>
    <!-- @@@@@@@@@@@@@@@@@@@@@@@END@@@@@@@@@@@@@@@@@@@@@@ -->
    <!-- @@@@@@@@@@@@@@@@@@@@@@@@自动发送通知消息@@@@@@@@@@@@@@@@@@@@@ -->
	 <bean id="autoSend" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
<!--             调用的类 -->
            <property name="targetObject">
                <ref bean="quartzJob"/>
            </property>
<!--             调用类中的方法 -->
            <property name="targetMethod">
                <value>autoSend</value>
            </property>
    </bean>
         <bean id="doAutoSend" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
            <property name="jobDetail">
                <ref bean="autoSend"/>
            </property>
<!--             cron表达式 -->
            <property name="cronExpression">
                <value>5/10 * * * * ?</value>
            </property>
    </bean>
    <!-- @@@@@@@@@@@@@@@@@@@@@@@@END@@@@@@@@@@@@@@@@@@@@@ -->
 <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->  
     <bean id="startQuertz" lazy-init="false" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
         <property name="triggers">
             <list>
                 <ref bean="doAutoToken"/>
                  <ref bean="doAutoSend"/> 
<!--                  <ref bean="autosenddoTime"/>  -->
                 
             </list>
         </property>
     </bean>
<!-- ========================定时任务 End====================== -->	
	<!-- 灵活获取对象 -->
	<bean name="springcontextbean" class="cn.util.SpringContext"></bean>
</beans>